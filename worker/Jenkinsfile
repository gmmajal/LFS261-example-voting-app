pipeline { 
    agent none
 
    stages{ 
        stage('build'){ 
            when{
               changeset "**/worker/**"
            }
            agent{
               docker{
                  image 'maven:3.9.8-sapmachine-21'
                  args '-v $HOME/.m2:/root/.m2'
               }
            }
            steps{ 
                echo 'building worker app' 
                dir('worker'){ 
                  sh 'mvn compile' 
                } 
            } 
        } 
        stage('test'){ 
            when{
               changeset "**/worker/**"
            }
            agent{
               docker{
                  image 'maven:3.9.8-sapmachine-21'
                  args '-v $HOME/.m2:/root/.m2'
               }
            }
            steps{ 
                echo 'running unit tests on worker app' 
                dir('worker'){
                  sh 'mvn clean test'
                }
            } 
        } 
        stage('package'){ 
            when{
               changeset "**/worker/**"
               branch 'master'
            }
            agent{
               docker{
                  image 'maven:3.9.8-sapmachine-21'
                  args '-v $HOME/.m2:/root/.m2'
               }
            }
            steps{ 
                echo 'packaging worker app into a jarfile'
                dir('worker'){
                  sh 'mvn package -DskipTests'
                  archiveArtifacts artifacts: '**/target/**.jar', fingerprint: true
                }
            } 
        }
        stage('docker-package'){
           agent any
           steps{
              echo 'packaging worker with Docker'
              script{
                 withCredentials([usernamePassword(credentialsId: 'dockerlogin', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]){
                     sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                     def workerImage = docker.build("gmajal/worker:v${env.BUILD_ID}","./worker")
                     workerImage.push()
                     workerImage.push("${env.BRANCH_NAME}")
                     workerImage.push("latest")
                 }
              }
           }
        } 
    }
    post{ 
        always{ 
            echo 'Building multibranch pipeline for worker is completed ...' 
       }
    }
}
